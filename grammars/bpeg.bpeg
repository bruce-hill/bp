# This is a file defining the BPEG grammar using BPEG syntax

Grammar: __ 0+(Def 0-1(__`;))%__ __ ($$ / @[!]{... => "Could not parse this code"})
Def: @[name]id _ `: __ (
      @[definition]extended-pat
    / $$ @[!]{=>"No definition for rule"}
    / @[!]{...>(`;/id_`:/$) => "Invalid definition: @0"})

# This is used for command line arguments:
String-pattern: 0+(`\ pat 0-1`; / .)

pat: suffixed-pat / simple-pat
simple-pat: Upto-and / Dot / String / Char-range / Char / Escape-range / Escape / No
    / Nodent / Repeat / After / Before / Capture / Replace / Ref / parens

suffixed-pat: Eq-pat / simple-pat 0-1(
      @[!]{`* => "'*' is not a BPEG operator. Use 0+<pat> instead of <pat>*"}
    / @[!]{`+ => "'+' is not a BPEG operator. Use 1+<pat> instead of <pat>+"}
    / @[!]{`? => "'?' is not a BPEG operator. Use 0-1<pat> instead of <pat>?"}
    / @[!]{`= => "'=' is not valid here. Perhaps you meant '==' or ':'"}
)

Eq-pat: @[first]simple-pat "==" @[second]pat

Dot: `. !`.
String: (
        `" @[s]0+(Escape / !`".) (`" / @[!]{=> "Expected closing quote here"})
      / `' @[s]0+(Escape / !`'.) (`' / @[!]{=> "Expected closing quote here"})
    )
Char-range: `` @[low]. `- (@[high]. / @[!]{=> "Expected a second character to form a character range"})
Char: `` (@[s]. / @[!]{=> "Expected a character following the '`'"})
Escape-range: `\ @[low]escape-sequence `- @[high]escape-sequence
Escape: `\ (@[s]escape-sequence
    / $ @[!]{=>"Backslashes are used for escape sequences, not splitting lines"}
    / @[!]{. 0+(Abc/`0-9) => "Invalid escape sequence: '@0'"}
)
escape-sequence: (
       `n/`t/`r/`e/`b/`a/`v
      / 1-3 `0-7
      / `x 2 (`0-9/`a-f/`A-F)
    )
No: `! (_@pat / @[!]{=>"Expected a pattern after the exclamation mark"})
Nodent: `|
Upto-and: 2-3`. 0-1(_@pat)
Repeat: (
        @[min]int _ `- _ @[max]int
      / @[min]int _ `+   @[max]''
      / @[min]@[max]int
    ) _ @[repeat-pat]pat 0-1( _ `% _ @[sep]pat)
After: `< _ pat
Before: `> _ pat
Capture: `@ 0-1(_ `[ @[capture-name](...>(`]/$$)) (`] / @[!]{=>"Expected closing bracket here"})) _ @[capture]pat
Replace: `{ __ (
      0-1(@[replace-pat]extended-pat __) "=>" 0-1(__ @[replacement]String)
    ) __ (`} / @[!]{=> "Expected closing brace here"})
Ref: @[name]id !>(_`:)

parens: `( __ extended-pat (__ `) / @[!]{=> "Expected closing parenthesis here"})

Chain: 2+@pat % __
Otherwise: 2+@(Chain/pat) % (__`/__)
extended-pat: Otherwise / Chain / pat

# Special-symbol rules:
_:  0+(`  / \t)
__: 0+(`  / \t / \r / \n / comment)
$$: !$.
$:  !.
^^: !<$.
^:  !<.

id: "^^" / "^" / "__" / "_" / "$$" / "$" / (`a-z/`A-Z) 0+(`a-z/`A-Z/`0-9/`-)

hash-comment: `# .. $

# Note: comments are undefined by default in regular BPEG
comment: hash-comment
